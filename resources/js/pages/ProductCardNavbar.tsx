import { useState } from "react";

type Props = {
  onFilterChange?: (filter: string) => void;
  // optional category controls
  category?: string | null;
  categoryCounts?: Map<string, number>;
  onCategoryChange?: (c: string | null) => void;
};

export default function ProductCardNavbar({ onFilterChange, category, categoryCounts, onCategoryChange }: Props) {
  const [active, setActive] = useState("View All");
  const [showFilters, setShowFilters] = useState(false);

  const tabs = ["View All", "Best Seller", "Low Price", "High Price"];

  function selectTab(tab: string) {
    setActive(tab);
    const filterKey = tab === "View All" ? "all" : tab === "Best Seller" ? "best_seller" : tab === "Low Price" ? "low_price" : "high_price";
    console.debug('[ProductCardNavbar] selectTab', { tab, filterKey });
    if (typeof onFilterChange === "function") {
      onFilterChange(filterKey);
    } else {
      // Dispatch a window event so parent/listener can react without prop
      window.dispatchEvent(new CustomEvent("productFilterChange", { detail: { filter: filterKey } }));
    }
    // Close mobile filter menu after selection
    setShowFilters(false);
  }

  return (
    <div className="w-full">
      {/* Desktop View - Horizontal Tabs */}
      <div className="hidden lg:flex gap-2 px-4 lg:px-10 py-5 flex-wrap">
        {tabs.map((tab) => (
          <button
            key={tab}
            onClick={() => selectTab(tab)}
            className={`px-3 xl:px-5 py-2 xl:py-4 text-lg xl:text-2xl font-bold transition-transform duration-300 ${
              active === tab
                ? "text-black underline decoration-blue-500 decoration-2 underline-offset-4 scale-102"
                : "text-[#AFAFAF] hover:text-black hover:underline hover:decoration-blue-500 hover:underline-offset-4 hover:scale-102"
            }`}
          >
            {tab}
          </button>
        ))}

        {/* Category quick-filter bar (optional, generated by parent) - Desktop */}
        {categoryCounts && typeof onCategoryChange === 'function' && (
          <div className="ml-6 flex gap-3 items-center flex-wrap">
            <button
              onClick={() => onCategoryChange('all')}
              className={`px-3 py-1 rounded-full border text-sm font-medium transition-colors ${category === null ? 'bg-[#4b9cd3] text-white' : 'bg-white hover:bg-gray-100'}`}
            >
              All ({Array.from(categoryCounts.values()).reduce((a,b)=>a+b,0)})
            </button>
            {Array.from(categoryCounts.entries()).map(([k, cnt]) => (
              <button
                key={k}
                onClick={() => onCategoryChange(k)}
                className={`px-3 py-1 rounded-full border text-sm font-medium transition-colors ${category === k ? 'bg-[#4b9cd3] text-white' : 'bg-white hover:bg-gray-100'}`}
              >
                {k === 'uncategorized' ? 'Uncategorized' : k} ({cnt})
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Mobile View - Dropdown Menu */}
      <div className="lg:hidden px-3 py-3">
        {/* Filter Button */}
        <button
          onClick={() => setShowFilters(!showFilters)}
          className="w-full flex items-center justify-between bg-white border-2 border-gray-300 rounded-lg px-4 py-3 font-semibold text-black hover:bg-gray-50 transition-colors"
        >
          <div className="flex items-center gap-2">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
            <span>Filter: {active}</span>
          </div>
          <svg
            className={`w-5 h-5 transform transition-transform ${showFilters ? 'rotate-180' : ''}`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>

        {/* Dropdown Menu */}
        {showFilters && (
          <div className="mt-2 bg-white border-2 border-gray-200 rounded-lg shadow-lg overflow-hidden">
            {/* Filter Tabs */}
            <div className="border-b-2 border-gray-200">
              <p className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase">Sort By</p>
              {tabs.map((tab) => (
                <button
                  key={tab}
                  onClick={() => selectTab(tab)}
                  className={`w-full text-left px-4 py-3 font-medium transition-colors ${
                    active === tab
                      ? "bg-[#4b9cd3] text-white"
                      : "text-gray-700 hover:bg-gray-100"
                  }`}
                >
                  {tab}
                  {active === tab && (
                    <span className="float-right">✓</span>
                  )}
                </button>
              ))}
            </div>

            {/* Category Filters (if provided) */}
            {categoryCounts && typeof onCategoryChange === 'function' && (
              <div>
                <p className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase">Categories</p>
                <button
                  onClick={() => { onCategoryChange('all'); setShowFilters(false); }}
                  className={`w-full text-left px-4 py-3 font-medium transition-colors ${
                    category === null
                      ? "bg-[#4b9cd3] text-white"
                      : "text-gray-700 hover:bg-gray-100"
                  }`}
                >
                  All ({Array.from(categoryCounts.values()).reduce((a,b)=>a+b,0)})
                  {category === null && (
                    <span className="float-right">✓</span>
                  )}
                </button>
                {Array.from(categoryCounts.entries()).map(([k, cnt]) => (
                  <button
                    key={k}
                    onClick={() => { onCategoryChange(k); setShowFilters(false); }}
                    className={`w-full text-left px-4 py-3 font-medium transition-colors ${
                      category === k
                        ? "bg-[#4b9cd3] text-white"
                        : "text-gray-700 hover:bg-gray-100"
                    }`}
                  >
                    {k === 'uncategorized' ? 'Uncategorized' : k} ({cnt})
                    {category === k && (
                      <span className="float-right">✓</span>
                    )}
                  </button>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Active Filter Indicator on Mobile (when menu is closed) */}
      {!showFilters && (category !== null || active !== "View All") && (
        <div className="lg:hidden px-3 pb-2">
          <div className="flex flex-wrap gap-2">
            {active !== "View All" && (
              <span className="inline-flex items-center gap-1 bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-full">
                Sort: {active}
              </span>
            )}
            {category !== null && (
              <span className="inline-flex items-center gap-1 bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full">
                Category: {category === 'uncategorized' ? 'Uncategorized' : category}
              </span>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
